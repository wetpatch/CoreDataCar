//
//  CoreDataCarApp.swift
//  CoreDataCar
//
//  Created by Chris Milne on 22/06/2023.
//

import SwiftUI

@main
struct CoreDataCarApp: App {
    @StateObject private var dataController = DataController()

    
    var body: some Scene {
        WindowGroup {
            ListView()
                .environment(\.managedObjectContext, dataController.container.viewContext)
        }
    }
}

//  ListView.swift


import SwiftUI
import CoreData

struct ListView: View {
    @Environment(\.managedObjectContext) var managedObjContext
    @Environment(\.dismiss) var dismiss
    
    /// Get the data. Use the date variable as an array and list in reverse order
    
    @FetchRequest(sortDescriptors: [SortDescriptor(\.purchasedate, order: .reverse)]) var car:
    FetchedResults<Car>
   @FetchRequest(sortDescriptors: [SortDescriptor(\.expensedate, order: .reverse)]) var expense:
   FetchedResults<Expense>
    
    @State private var showingAddView = false
    
    
    var body: some View {
        NavigationView {
            VStack(alignment: .leading) {
                List {                            /// WE have an UUID so do not need an initial value in the For Next Loop
                    ForEach(car) { car in
                        NavigationLink(
                            destination: MainCarView(car: car)
                        ) {
                            HStack {
                                VStack(alignment: .leading, spacing: 6) {
                                    if car.make != nil  {
                                        Text("\(car.make ?? "")") + Text(" \(car.model ?? "")") + Text("  \(car.regno ?? "")")
                                            .bold()
                                            .foregroundColor(.red)
                                        Spacer()
                                    } /// If
                                    else {
                                        Text("Empty Record")
                                    } /// else
                                } ///VStack
                            } /// HStack
                        } /// Nav Link
                    } /// For Each
                    .onDelete(perform: deleteCar)
                } /// List
                .listStyle(.plain)
            } /// VStack
            
            
            .navigationTitle("All Vehicles")
            .toolbar {
                
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button {
                        showingAddView.toggle()
                    } label: {
                        Label("Add Car",  systemImage: "plus.circle")
                        Text("Add")
                    } /// Label
                }  /// ToolbarItem
                
                
                ToolbarItem(placement: .navigationBarLeading) {
                    EditButton()   /// Displays an Edit button
                } /// ToolbarItem
            } /// ToolBar
            .sheet(isPresented: $showingAddView) {
                AddCarView()
                
                
            } /// sheet
        } /// Nav View
        .navigationViewStyle(.stack)
        
    } /// Body View
    
    private func deleteCar(offsets: IndexSet)  {
        withAnimation {                          /// Need to map the Database to the current position with [$0]
            offsets.map { car[$0] }
                .forEach(managedObjContext.delete)
            DataController().save(context: managedObjContext)
        }
    }
}
struct ListView_Previews: PreviewProvider {
    static var previews: some View {
        ListView()
    }
}

//
//  MainCarView.swift
//  CoreDataCar
//
//  Created by Chris Milne on 27/06/2023.
//

import SwiftUI

struct MainCarView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    /*   Each button uses its respective state variable, ensuring that tapping the buttons will toggle the correct boolean value and present the corresponding sheet view */
    @State private var showingEditView = false
    @State private var showingAddView = false
    @State private var showingExtraView = false
    @State private var showingInsurance = false
    @State private var showingExpense = false
    
    var car: FetchedResults<Car>.Element
    //    var expense: FetchedResults<Expense>.Element
    
    @State private var make = ""
    @State private var model = ""
    @State private var regno = ""
    @State private var fuelcosttot:Double = 0.0
    @State private var purchasedate:Date = Date()
    @State private var mileagestarting:Int64  = 0
    @State private var purchasecost:Double = 0.0
    @State private var insurancecosttot:Int64  = 0
    @State private var litrestot:Double = 0.0
    @State private var insurancedate:Date = Date()
    @State private var regdate:Date = Date()
    @State private var motdate:Date = Date()
    
    var body: some View {
        Text("      Edit       Fuel    Extra   Insurance  Expenses         ")
        
        //Work out No of Days  since the Start
        let calendar = Calendar.current
        let firstDate = car.purchasedate!
        let ToDate = Date()
        // Replace the hour (time) of both dates with 00:00
        let date1 = calendar.startOfDay(for: firstDate)
        let date2 = calendar.startOfDay(for: ToDate)
        let components = calendar.dateComponents([Calendar.Component.day], from: date1, to: date2)
        // This will return the number of day(s) between dates
        let daysDiff = components.day
        //Work out Cost per Day and Month
        let costperDay: Double = (car.fuelcosttot) / Double(daysDiff ?? 0)
        let costperMonth: Double = costperDay * 30
        
        
        
        NavigationView {
            
            VStack (alignment: .leading, spacing: 10) {
                List {
                    let columns = [GridItem(.fixed(175)), GridItem(.fixed(175))]
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )      {
                        
                        Text("   Make/Model").gridCellColumns(1)
                        Text("\(car.make!) \(car.model!)").gridCellColumns(2)
                        // .font(.system(size: 12))
                        Text("   Reg Number: ").gridCellColumns(1)
                        Text("\(car.regno ?? "")").gridCellColumns(2)
                        Text("  Registered Date").gridCellColumns(1)
                        Text(DataController.aString(date: car.regdate ?? Date())).gridCellColumns(2)
                        Text("  Starting Mileage").gridCellColumns(1)
                        Text(" \(car.mileagestarting)").gridCellColumns(2)
                        Text("  Purchase Cost").gridCellColumns(1)
                        Text("£ " + String(format: "%.0f", car.purchasecost)).gridCellColumns(2)
                        
                    }  /// LazyGrid
                    let average = Double(car.mileagenow - car.mileagestarting) / (car .litrestot / 4.536)
                    
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )      {
                        Text("  Purchase Date").gridCellColumns(1)
                        Text(DataController.aString(date: car.purchasedate ?? Date())).gridCellColumns(2)
                        Text("  Tax Date").gridCellColumns(1)
                        Text(DataController.aString(date: car.taxdate ?? Date())).gridCellColumns(2)
                        Text("  MOT Date").gridCellColumns(1)
                        Text(DataController.aString(date: car.motdate ?? Date())).gridCellColumns(2)
                        Text("  Insurance Date").gridCellColumns(1)
                        Text(DataController.aString(date: car.insurancedate ?? Date())).gridCellColumns(2)
                        Text("  Average MPG").gridCellColumns(1);
                        Text(String(format: "%.1f", average)).gridCellColumns(2)

                        
                        
                    }/// LazyGrid
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )      {
                        Text("  Tot Fuel Cost").gridCellColumns(1);
                        Text("£ " + String(format: "%.0f", car.fuelcosttot)).gridCellColumns(2)
                        Text("  Tot Insurance").gridCellColumns(1);
                        Text("£ \( car.insurancecosttot)").gridCellColumns(2)
                        Text("  Tot Expenses").gridCellColumns(1)
                        Text("£ " + String(format: "%.0f", car.expensestot)).gridCellColumns(2)
                        Text("  Fuel Cost Daily").gridCellColumns(1)
                        Text("£ " + String(format: "%.0f", costperDay)).gridCellColumns(2)
                        Text("  Fuel Cost Monthly").gridCellColumns(1)
                        Text("£ " + String(format: "%.0f", costperMonth)).gridCellColumns(2)
                        //                      Spacer()
                    } /// LazyGrid
                }  /// VStack
            } // List
            
            // Displays  "Edit   Fuel   Extra   Insurance  Expenses" at the top of the screen
            
            .navigationTitle("")
            .toolbar {
                Button {
                    showingEditView.toggle()
                    
                } label: {
                    Label("edit", systemImage: "square.and.pencil")
                } /// Label
                .sheet(isPresented: $showingEditView) {
                    EditCarView(car:car)
                } /// sheet
                Text("  ")
                
                Button {
                    showingAddView.toggle()
                } label: {
                    Label("fuel", systemImage: "fuelpump.circle")
                } /// Label
                .sheet(isPresented: $showingAddView) {
                    AddFuelView(car:car)
                } /// sheet
                Text("  ")
                
                
                Button {
                    showingExtraView.toggle()
                } label: {
                    Label("extra", systemImage: "list.bullet")
                } /// Label
                .sheet(isPresented: $showingExtraView) {
                    ExtraDetailsView(car:car)
                } /// sheet
                Text("     ")
                Button {
                    showingInsurance.toggle()
                } label: {
                    Label("insurance", systemImage: "cross.vial")
                } /// Label
                .sheet(isPresented: $showingInsurance) {
                    Insurance(car:car)
                } /// sheet
                Text("   ")
                
                Button {
                    showingExpense.toggle()
                } label: {
                    Label("Expenses", systemImage: "sterlingsign.circle")
                } /// Label
                .sheet(isPresented: $showingExpense) {
                    AddExpense(car:car)
                } /// sheet
                Text("   ").padding()
                
            } /// .toolbar
        } /// NavigationView
    } /// Body
}  //// Struct


//
//  AddCarView.swift


import SwiftUI

struct AddCarView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
 ///   Initial Details
    
    @State private var make = ""
    @State private var model = ""
    @State private var regno = ""
    @State private var mileagestarting:Int64 = 0
    @State private var purchasecost:Double = 0.0
    @State private var purchasedate = Date()
    @State private var regdate = Date()
    @State private var motdate = Date()
    @State private var taxdate = Date()
    
    @State private var purchasedateString = ""
    @State private var regdateString = ""
    @State private var motdateString = ""
    @State private var taxdateString = ""
    
    @State private var selectedDate = Date()

    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()
    
    var body: some View {
        Text("Add Car")
            .bold()
            .foregroundColor(.blue)
            .font(Font.custom("Avenir Heavy", size: 24))
        
        VStack {
            Form {
            Section {
                let columns = [GridItem(.fixed(120)), GridItem(.fixed(175))]
                LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {
                    Text("Car Make").gridCellColumns(1)
                    TextField("Car Make", text: $make).textFieldStyle(.roundedBorder).gridCellColumns(2)
                    Text("Car Model").gridCellColumns(1)
                    TextField("Car Model", text: $model).textFieldStyle(.roundedBorder).gridCellColumns(2)
                    Text("Reg Number").gridCellColumns(1)
                    TextField("Reg No", text: $regno).textFieldStyle(.roundedBorder).gridCellColumns(2)
                    Text("Starting Mileage").gridCellColumns(1)
                    TextField("Starting Mileage", value: $mileagestarting, format: .number).textFieldStyle(.roundedBorder).gridCellColumns(2)
                    Text("Purchase Cost").gridCellColumns(1)
                    TextField("Purchase Cost", value: $purchasecost, format: .currency (code: "GBP ")).textFieldStyle(.roundedBorder).gridCellColumns(2)
                }   /// LazyGrid
                
                LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 5 )  {
                    Text("Purchase Date").gridCellColumns(1)
                    DatePicker("Purchase Date", selection: $purchasedate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $purchasedateString))
                        .gridCellColumns(2)
                        .onChange(of: purchasedate) { newDate in
                            purchasedateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                    Text("Registered Date").gridCellColumns(1)
                    DatePicker("Reg Date", selection: $regdate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $regdateString))
                        .gridCellColumns(2)
                        .onChange(of: regdate) { newDate in
                            regdateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                    Text("MOT Date").gridCellColumns(1)
                    DatePicker("Mot Date", selection: $motdate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $motdateString))
                        .gridCellColumns(2)
                        .onChange(of: motdate) { newDate in
                            motdateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                    Text("Tax Date").gridCellColumns(1)
                    DatePicker("Tax Date", selection: $taxdate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $taxdateString))
                        .gridCellColumns(2)
                        .onChange(of: taxdate) { newDate in
                            taxdateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                    ///
                    ///
                    ///
                    ///
                        }  /// Lazygrid
            }   /// Section
        } /// Form
    }  // VStack
     
                HStack {
                    Spacer()
                    Button("Submit") {
  
                        DataController().addCar(make: make, model: model, regno: regno, purchasedate: purchasedate, mileagestarting: mileagestarting, purchasecost: purchasecost, regdate: regdate, motdate: motdate, taxdate: taxdate, context: managedObjectContext)

                        dismiss()
                        
                    } ///Button
                    Spacer()
                    Button("Exit") {
                        dismiss()
                    } ///Button
                    Spacer()
                } /// HStack
            }   /// Body
        } /// Struct


//  EditCarView.swift


import SwiftUI

struct EditCarView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    var car: FetchedResults<Car>.Element

    @State private var make = ""
    @State private var model = ""
    @State private var regno = ""
    @State private var purchasedate = Date()
    @State private var regdate = Date()
    @State private var motdate = Date()
    @State private var taxdate = Date()
    @State private var mileagestarting:Int64  = 0
    @State private var purchasecost:Double = 0.0
    @State private var purchasedateString = ""
    @State private var regdateString = ""
    @State private var motdateString = ""
    @State private var taxdateString = ""

    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()

    var body: some View {
        
        VStack   {

                Text("Edit Car")
                    .bold()
                    .foregroundColor(.blue)
                    .font(Font.custom("Avenir Heavy", size: 24))
            Form {
                Section {
                    let columns = [GridItem(.fixed(175)), GridItem(.fixed(175))]
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {
                        Text("   Car Make").gridCellColumns(1)
                        TextField("Car Make", text: $make).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("   Car Model").gridCellColumns(1)
                        TextField("Car Model", text: $model).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("   Reg Number").gridCellColumns(1)
                        TextField("Reg No", text: $regno).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("   Starting Mileage").gridCellColumns(1)
                        TextField("Starting Mileage", value: $mileagestarting, format: .number).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        
                    }   /// LazyGrid
                    
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {
                        
                        Text("   Purchase Cost").gridCellColumns(1)
                        TextField("Purchase Cost", value: $purchasecost, format: .currency (code: "GBP ")).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("   Purchase Date").gridCellColumns(1)
                        DatePicker("Purchase Date", selection: $purchasedate, displayedComponents: .date)
                            .datePickerStyle(TextDatePickerStyle(dateString: $purchasedateString))
                            .gridCellColumns(2)
                            .onChange(of: purchasedate) { newDate in
                                purchasedateString = dateFormatter.string(from: newDate)
                            }  /// NewDate
                        Text("   Registration Date").gridCellColumns(1)
                        DatePicker("Reg Date", selection: $regdate, displayedComponents: .date)
                            .datePickerStyle(TextDatePickerStyle(dateString: $regdateString))
                            .gridCellColumns(2)
                            .onChange(of: regdate) { newDate in
                                regdateString = dateFormatter.string(from: newDate)
                            }  /// NewDate
                        Text("   TAX Date").gridCellColumns(1)
                        DatePicker("Tax Date", selection: $taxdate, displayedComponents: .date)
                            .datePickerStyle(TextDatePickerStyle(dateString: $taxdateString))
                            .gridCellColumns(2)
                            .onChange(of: taxdate) { newDate in
                                taxdateString = dateFormatter.string(from: newDate)
                            }  /// NewDate
                        Text("   MOT Date").gridCellColumns(1)
                        DatePicker("MOT Date", selection: $motdate, displayedComponents: .date)
                            .datePickerStyle(TextDatePickerStyle(dateString: $motdateString))
                            .gridCellColumns(2)
                            .onChange(of: motdate) { newDate in
                                motdateString = dateFormatter.string(from: newDate)
                            }  /// NewDate

 
 
                    }  /// LazyGrid
                } /// Form
            } /// Section
      .onAppear {
          make = car.make!
          model = car.model!
          regno = car.regno!
          mileagestarting = car.mileagestarting
          purchasecost = car.purchasecost
          purchasedate = car.purchasedate!
          regdate = car.regdate ?? Date()
          motdate = car.motdate ?? Date()
          taxdate = car.taxdate ?? Date()
      } /// onAppear

        }  /// VStack
        
        HStack {
            Spacer()
            Button("Submit") {
                DataController().editCar(car: car, make: make, model: model, regno: regno, purchasedate: purchasedate, mileagestarting: mileagestarting, purchasecost: purchasecost, regdate: regdate,  taxdate: taxdate, motdate: motdate, context: managedObjectContext)
                dismiss()
            } ///Button
            Spacer()
            Button("Exit") {
                dismiss()
            } ///Button
            Spacer()
            
        } /// Hstack
    } /// Body
} /// struct

//
//  AddFuelView.swift
//  CoreDataCar
//
//  Created by Chris Milne on 26/08/2023.
//

import SwiftUI

struct AddFuelView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    var car: FetchedResults<Car>.Element
    @State private var fueldate = Date()
    @State private var mileagenow:Int64  = 0
    @State private var litresnow:Double = 0.0
    @State private var litrestot:Double = 0.0
    @State private var costperlitre:Double = 0.0
    @State private var selectedDate = Date()
    @State private var dateString: String = ""
    @State private var fueldateString: String = ""
    @State private var fuelcostnow:Double = 0.0
    @State private var fuelcosttot:Double = 0.0
    
    @State var cost: Double = 0.0
    @State var mileage: Int64 = 0
    @State var litres: Double = 0.0

    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()
    
    var body: some View {

        VStack   {

                Text("Add Fuel")
                    .bold()
                    .foregroundColor(.blue)
                    .font(Font.custom("Avenir Heavy", size: 24))
                Text("\(car.make!) \(car.model!)")
                    .bold()
                    .foregroundColor(.red)
                    .font(Font.custom("Avenir Heavy", size: 24))

            
            Form {
                Section {
                    let columns = [GridItem(.fixed(175)), GridItem(.fixed(175))]
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {                    Text("  Fuel Date").gridCellColumns(1)
                    DatePicker("Fuel Date", selection: $selectedDate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $fueldateString))
                        .gridCellColumns(2)
                        .onChange(of: fueldate) { newDate in
                            fueldateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                        Text("   No of Litres").gridCellColumns(1)
                        TextField("Litres quantity", value: $litres, format: .number).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("  Cost per Litre").gridCellColumns(1)
                        TextField("Cost per Litre", value: $cost, format: .number).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        Text("  Current Mileage").gridCellColumns(1)
                        TextField("Current Mileage", value: $mileage, format: .number).textFieldStyle(.roundedBorder).gridCellColumns(2)
                    }  /// LazyGrid
                    ///
                    .onAppear {
                        litresnow = litres
                        fuelcostnow = litres * cost
                        litrestot = litres + car.litrestot
                        costperlitre = cost
                            } /// onAppear
                    
                    LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {
                        Text("  Fuel Cost").gridCellColumns(1);
                        Text("£ " + String(format: "%.2f", litres * cost)).gridCellColumns(2)
                        Text("  Tot Litres").gridCellColumns(1);
                        Text(String(format: "%.1f", litres + car.litrestot)).gridCellColumns(2)
                        Text("  Tot Gallons").gridCellColumns(1);
                        Text(String(format: "%.2f", ((litres + car.litrestot) / 4.536))).gridCellColumns(2)
                    .onAppear {
                        mileagenow = mileage
                        fueldate = selectedDate
                            } /// onAppear
                    }  /// LazyGrid
                } /// Section
           } /// Form
                        HStack {
                            Spacer()
                            Button("Submit") {
                                DataController().addFuel(car: car, fueldate:  selectedDate, litresnow: litres,  costperlitre: cost, mileagenow: mileage, fuelcostnow: litres * cost, litrestot: litres + litrestot, fuelcosttot: (litres * cost) + fuelcosttot,
                                                         context: managedObjectContext)
                                dismiss()
                            } ///Button
                            Spacer()
                            Button("Exit") {
                                dismiss()
                            } /// Button
                            Spacer()
                            }
                        } /// Hstack
    } /// Body
} /// struct



//
//  ExtraDetailsView.swift
//  CoreDataCar

import SwiftUI

struct ExtraDetailsView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    var car: FetchedResults<Car>.Element
    
    @State private var fueltype = ""
    @State private var enginesize = ""
    @State private var vin = ""
    @State private var version = ""
    @State private var colour = ""
    @State private var tyrepressure = ""
    @State private var oiltype = ""
    
    var body: some View {
        
        VStack   {
                Text("Extra Details")
                    .bold()
                    .foregroundColor(.blue)
                    .font(Font.custom("Avenir Heavy", size: 24))
                Text("\(car.make!) \(car.model!)")
                    .bold()
                    .foregroundColor(.red)
                    .font(Font.custom("Avenir Heavy", size: 24))
                
                    Section {
                        let columns = [GridItem(.fixed(120)), GridItem(.fixed(175))]
  LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 5 )  {
                            Text("  Fuel Type").gridCellColumns(1)
  TextField("Fuel Type", text: $fueltype).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Engine Size").gridCellColumns(1)
 TextField("Engine Size", text: $enginesize).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  VIN No").gridCellColumns(1)
 TextField("VIN No", text: $vin).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Engine version").gridCellColumns(1)
 TextField("Engine version", text: $version).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Body Colour").gridCellColumns(1)
 TextField("Body Colour", text: $colour).textFieldStyle(.roundedBorder).gridCellColumns(2)
                        }   /// LazyGrid
                    }  ///Section
                    
                    Section {
                        let columns = [GridItem(.fixed(120)), GridItem(.fixed(175))]
          LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 5 )  {
                            Text("  Tyre Pressure").gridCellColumns(1)
TextField("Tyre Pressure", text: $tyrepressure).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Oil Type").gridCellColumns(1)
 
TextField("Oil Type", text: $oiltype).textFieldStyle(.roundedBorder).gridCellColumns(2)
                                .onAppear {
                                    fueltype = car.fueltype ?? " "
                                    enginesize = car.enginesize ?? " "
                                    vin = car.vin ?? " "
                                    version = car.version ?? " "
                                    colour = car.colour ?? " "
                                    tyrepressure = car.tyrepressure ?? " "
                                    oiltype = car.oiltype ?? " "
                                    
                                } /// onAppear
                        }   /// LazyGrid
                    }  ///Section
            } /// VStack
            HStack {
                Spacer()
                Button("Submit") {
                    DataController().extraDetails(car: car, fueltype:  fueltype, enginesize: enginesize, vin: vin, version: version,  colour: colour, tyrepressure: tyrepressure, oiltype: oiltype,
                                                  context: managedObjectContext)
                    dismiss()
                } ///Button
                Spacer()
                Button("Exit") {
                    dismiss()
                } ///Button
                Spacer()
            } /// Hstack
    } /// Body
} /// struct


//
//  Insurance.swift
//  CoreDataCar
//
//  Created by Chris Milne on 04/07/2023.
//

import SwiftUI

struct Insurance: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    var car: FetchedResults<Car>.Element
    
    /// Insurance Details
    @State private var insurancedate = Date()
    @State private var insurername = ""
    @State private var insurercontact = ""
    @State private var insurerpolicy = ""
    @State private var insurancecostnow:Int64 = 0
    @State private var insurancecosttot:Int64 = 0
    @State private var selectedDate = Date()
    @State private var dateString: String = ""
    @State private var insurancedateString: String = ""
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()
    
    var body: some View {
        
        VStack   {
                Text("Insurance")
                    .bold()
                    .foregroundColor(.blue)
                    .font(Font.custom("Avenir Heavy", size: 24))
                Text("\(car.make!) \(car.model!)")
                    .bold()
                    .foregroundColor(.red)
                    .font(Font.custom("Avenir Heavy", size: 24))

                    Section {
                        let columns = [GridItem(.fixed(120)), GridItem(.fixed(175))]
                        LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 5 )  {
                            Text("  Insurer").gridCellColumns(1)
                            TextField("Insurer", text: $insurername).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Policy No").gridCellColumns(1)
                            TextField("Policy No", text: $insurerpolicy).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Premium").gridCellColumns(1)
                            TextField("Premium", value: $insurancecostnow, format: .currency (code: "GBP")).textFieldStyle(.roundedBorder).gridCellColumns(2)
                            Text("  Renewal Date").gridCellColumns(1)
              DatePicker("Renewal Date", selection: $insurancedate, displayedComponents: .date)
                  .datePickerStyle(TextDatePickerStyle(dateString: $insurancedateString))
                  .gridCellColumns(2)
                  .onChange(of: insurancedate) { newDate in
                      insurancedateString = dateFormatter.string(from: newDate)
                  }  /// NewDate
                            Text("  Contact").gridCellColumns(1)
                            TextField("Contact", text: $insurercontact).textFieldStyle(.roundedBorder).gridCellColumns(2)

                                .onAppear {
                                    insurername = car.insurername ?? " "
                                    insurerpolicy = car.insurerpolicy ?? " "
                                    insurancecostnow = car.insurancecostnow
                                    insurercontact = car.insurercontact ?? " "
                                    insurancedate = insurancedate

                                    
                                } /// onAppear
                        }   /// LazyGrid
                    }  ///Section
                ///                        }  // Form
            } /// VStack
            HStack {
                Spacer()
                Button("Submit") {
                    DataController().insurance(car: car, insurancedate: insurancedate, insurername:  insurername, insurercontact: insurercontact, insurerpolicy: insurerpolicy, insurancecostnow: insurancecostnow, insurancecosttot: insurancecostnow + insurancecosttot,
                                                  context: managedObjectContext)
                    dismiss()
                } ///Button
                Spacer()
                Button("Exit") {
                    dismiss()
                } ///Button
                Spacer()
            } /// Hstack
    } /// Body
} /// struct

//
//  AddExpense.swift
//  CoreDataCar
//
//  Created by Chris Milne on 03/09/2023.
//
//
import SwiftUI
import CoreData

struct AddExpense: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    @Environment(\.dismiss) var dismiss
    
    
    @StateObject var car: Car
    @State private var regnum = ""
    @State private var expensedetail: String = ""
    @State private var expensecost:Double = 0.0
    @State private var expensedate = Date()
    
    @State private var expensedateString = ""
    @State private var selectedDate = Date()
    @State var detail: String = ""
    @State var cost: Double = 0.0
    @State var expensetot: Double = 0.0
    @State private var isEditing = false
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()
    
    
    var body: some View {
        
        Text("Add Expense")
            .bold()
            .foregroundColor(.blue)
            .font(Font.custom("Avenir Heavy", size: 20))
        Text("\(car.make!) \(car.model!) \(car.regno!)")
            .bold()
            .foregroundColor(.red)
            .font(Font.custom("Avenir Heavy", size: 20))
        
        //       HStack {
        Form {
            Section {
                let columns = [GridItem(.fixed(120)), GridItem(.fixed(175))]
                LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 5) {
                    Text(" Expense Date").font(.system(size: 14, weight: .bold))
                    DatePicker("   Expense Date", selection: $selectedDate, displayedComponents: .date)
                        .datePickerStyle(TextDatePickerStyle(dateString: $expensedateString))
                        .gridCellColumns(2)
                        .onChange(of: selectedDate) { newDate in
                            expensedateString = dateFormatter.string(from: newDate)
                        }  /// NewDate
                    
                    Text(" Detail").font(.system(size: 14, weight: .bold))
                    TextField("Detail", text: $detail)
                        .font(.system(size: 14, weight: .bold))
                        .textFieldStyle(.roundedBorder).gridCellColumns(1)
                    Text(" Cost").font(.system(size: 14, weight: .bold))
                    TextField(" Cost", value: $cost, format: .number)
                        .font(.system(size: 14, weight: .bold))
                        .textFieldStyle(.roundedBorder).gridCellColumns(2)
                    Spacer()
                    Button(action: addExpense) {
                        Label("Add", systemImage: "plus").labelStyle(.titleOnly)
                            .frame(width: 44, height: 44, alignment: .center)
                            .padding([.bottom, .leading], 10) 
                    } /// Button
                }   /// LazyGrid
            }   /// Section
        } /// Form

        
        NavigationView {
            VStack(alignment: .leading) {
                List {
                    ForEach(car.expensesArray) { expense in
                        NavigationLink(
                            destination: MainCarView(car: car)
                        )  {
                                Text(DataController.aString(date: expense.expensedate ?? Date()))
                                    .font(.system(size: 14, weight: .light))
                                Text(expense.expensedetail ?? "")
                                    .font(.system(size: 14, weight: .light))
                                Text("£ " + String(format: "%.0f", expense.expensecost))
                                    .font(.system(size: 14, weight: .light))
                        }   /// NavLink

                    }.onDelete(perform: deleteExpense)      /// For Each
                } /// List
                Text("                      Total Expenses: £ " + String(format: "%.0f", car.expensesArray.reduce(0.0)
                    { $0 + ($1.expensecost) }))
                .font(.system(size: 14, weight: .light))
                
            } /// VStack


            
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    EditButton()   /// Displays an Edit button
                } /// ToolbarItem
            } /// ToolBar
            .sheet(isPresented: $isEditing) {
                ListView()
                
            } /// sheet
        } /// Nav View
        .navigationViewStyle(.stack)
        
        //              HStack {
        Button("Exit")
        {
            dismiss()
        }                                   ///Button
        .padding([.bottom, .leading], 20)  /// HStack
        
    } /// Body
    
    private func deleteExpense(offsets: IndexSet) {
        withAnimation {
            offsets.map { car.expensesArray[$0] }
                .forEach { expense in
                    managedObjectContext.delete(expense)
                }
            DataController().save(context: managedObjectContext)
        } /// func
    } /// Animation
    
    
    
    private func addExpense() {
        withAnimation {
            let newExpense = Expense(context: managedObjectContext)
            newExpense.expensedetail = detail
            newExpense.expensecost = Double(cost)
            newExpense.expensedate = selectedDate
            
            car.addToExpenses(newExpense)
            DataController().save(context: managedObjectContext)
            updateTotExpense()
        }
    }
    private func updateTotExpense() {
        /* The reduce function is used to iterate through car.expensesArray and calculate the total expenses. The initial value is 0.0, and for each expense ($1), the expensecost is added to the accumulator ($0).
         The nil coalescing operator (??) is used to handle the case where expensecost might be nil (optional), ensuring that it's treated as 0.0 in the calculation.
         
         After running this code, the total expenses will be stored in car.expensestot. This property will be updated whenever the expenses in car.expensesArray change, ensuring that it always reflects the correct total.
         */
        car.expensestot = car.expensesArray.reduce(0.0) { $0 + ($1.expensecost ) }
        DataController().save(context: managedObjectContext)
    }
    
    
}
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
 /*
        ScrollView {
            let columns = [GridItem(.fixed(80)), GridItem(.fixed(175)), GridItem(.fixed(60))]
            LazyVGrid(columns: columns, alignment: HorizontalAlignment.leading, spacing: 10 )  {

                    ForEach(car.expensesArray) { expense in

                        Text(DataController.aString(date: expense.expensedate ?? Date()))
                            .font(.system(size: 12, weight: .light))
                            .gridCellColumns(1)
                        
                        Text(expense.expensedetail ?? "")
                            .font(.system(size: 12, weight: .light))
                            .gridCellColumns(2)
                        
                        Text("£ " + String(format: "%.0f", expense.expensecost))
                            .font(.system(size: 12, weight: .light))
                            .gridCellColumns(3)

                    }.onDelete(perform: deleteExpense)   /// ForEACH
                } /// LaztGrid
            } /// ScrollView
*/

/*
    func deleteExpense(at offsets: IndexSet) {
        withAnimation {
            for index in offsets {
                let expense = Expense(context: managedObjectContext)
    //            car.deleteExpense(expense)
      //          context.delete(expense)
                DataController().deleteExpense(context: managedObjectContext, expense: expense)
                
            }
        }
    }
 */


//
//  DataController.swift
//  CoreDataCar
//
//  Created by Chris Milne on 22/06/2023.
//

import Foundation
import CoreData

class DataController: ObservableObject {
    let container = NSPersistentContainer(name: "CarModel")
    
    init() {
        container.loadPersistentStores { desc, error in
            if let error = error {
                print("Failed to load data \(error.localizedDescription)")
            }
        }
    }
    
    func save(context: NSManagedObjectContext) {
        do {
            try context.save()
            print("Data saved")
        } catch {
            context.rollback()
            print("Could not save the Data")
        }
    }
    
    func addCar(make: String, model: String, regno: String, purchasedate: Date, mileagestarting: Int64, purchasecost: Double, regdate: Date, motdate: Date, taxdate: Date, context: NSManagedObjectContext) {
        let car = Car(context: context)
        car.id = UUID()
        car.make = make
        car.model = model
        car.regno = regno
        car.purchasedate = purchasedate
        car.mileagestarting = mileagestarting
        car.purchasecost = purchasecost
        car.regdate = regdate
        car.motdate = motdate
        car.taxdate = taxdate
        save(context: context)
    }

    func addExpense(expensedate: Date, expensedetail: String, expensecost: Double, regnum: String, context: NSManagedObjectContext) {
        let expense = Expense(context: context)
        expense.exit = UUID()
        expense.expensedate = expensedate
        expense.expensedetail = expensedetail
        expense.expensecost = expensecost
        expense.regnum = regnum
        save(context: context)
    }
    
    func addExpenseToCar(context: NSManagedObjectContext, car: Car, expense: Expense) {
        car.addToExpenses(expense)
        save(context: context)
    }
    
    
    
    func getExpenses(context: NSManagedObjectContext) -> Array<Expense> {
        let fetchRequest: NSFetchRequest<Expense> = Expense.fetchRequest()
        let result = try? context.fetch(fetchRequest)
        
        guard let result = result, !result.isEmpty else {
            return []
        }
        return result
    }
    
    func deleteExpense(context: NSManagedObjectContext, expense: Expense){
        context.delete(expense)
        save(context: context)
    }
    
    func editCar(car: Car, make: String, model: String, regno: String, purchasedate: Date, mileagestarting: Int64, purchasecost: Double, regdate: Date, taxdate: Date, motdate: Date, context: NSManagedObjectContext) {
        car.make = make
        car.model = model
        car.regno = regno
        car.purchasedate = purchasedate
        car.mileagestarting = mileagestarting
        car.purchasecost = purchasecost
        car.regdate = regdate
        car.taxdate = taxdate
        car.motdate = motdate
        save(context: context)
    }
    func addFuel(car: Car, fueldate: Date, litresnow: Double, costperlitre: Double, mileagenow: Int64, fuelcostnow: Double, litrestot: Double, fuelcosttot: Double,
                 context: NSManagedObjectContext) {
        car.fueldate = fueldate
        car.mileagenow = mileagenow
        car.litresnow  = litresnow
        car.costperlitre = costperlitre
        car.fuelcostnow = fuelcostnow
        car.litrestot = litrestot
        car.fuelcosttot = fuelcosttot
        save(context: context)
    }
    
    func extraDetails(car: Car, fueltype: String, enginesize: String, vin: String, version: String, colour: String, tyrepressure: String, oiltype: String, context: NSManagedObjectContext) {
        car.fueltype = fueltype
        car.enginesize = enginesize
        car.vin  = vin
        car.version = version
        car.colour = colour
        car.tyrepressure = tyrepressure
        car.oiltype = oiltype
        save(context: context)
    }
    
    func insurance(car: Car, insurancedate: Date, insurername: String, insurercontact: String, insurerpolicy: String, insurancecostnow: Int64, insurancecosttot: Int64,
                   context: NSManagedObjectContext) {
        car.insurancedate = insurancedate
        car.insurername = insurername
        car.insurercontact = insurercontact
        car.insurerpolicy = insurerpolicy
        car.insurancecostnow = insurancecostnow
        car.insurancecosttot = insurancecosttot
        save(context: context)
    }
    
    static func aString(date: Date) -> String {
        
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy"
        let strDate = formatter.string(from: date)
        return strDate
    }
}

//
//  TimeFormatting.swift
//  CoreDataCar
//
//  Created by Chris Milne on 22/06/2023.
//

import Foundation
func calcTimeSince(date: Date) -> String {
    let minutes = Int(-date.timeIntervalSinceNow)/60
    let hours = minutes/60
    let days = hours/24
    
    if minutes < 120 {
        return "\(minutes) minutes ago"
    } else if minutes >= 120 && hours < 48 {
        return "\(hours) hours ago"
    }  else {
        return "\(days) days ago"
    }
}

//
//  TextDatePickerStyle.swift
//  CoreDataCar
//
//  Created by Chris Milne on 30/07/2023.
//

import SwiftUI

struct TextDatePickerStyle: DatePickerStyle {
    var dateString: Binding<String>

    static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy" // Change the date format to match your desired format
        return formatter
    }()

    func makeBody(configuration: Configuration) -> some View {
        TextField("Enter date", text: dateString, onEditingChanged: { editing in
            if !editing, let newDate = Self.dateFormatter.date(from: dateString.wrappedValue) {
                configuration.selection = newDate
            }
        })
        .textFieldStyle(RoundedBorderTextFieldStyle())
        .onAppear {
            dateString.wrappedValue = Self.dateFormatter.string(from: configuration.selection)
        }
    }
}


//
//  Car+CoreDataProperties.swift
//  CoreDataCar
//
//  Created by Chris Milne on 29/08/2023.
//
//

import Foundation
import CoreData


extension Car {
    
    @nonobjc public class func fetchRequest() -> NSFetchRequest<Car> {
        return NSFetchRequest<Car>(entityName: "Car")
    }
    
    @NSManaged public var colour: String?
    @NSManaged public var costdaily: Double
    @NSManaged public var costmonthly: Double
    @NSManaged public var costperlitre: Double
    @NSManaged public var costpermile: Double
    @NSManaged public var enginesize: String?
    @NSManaged public var expensestot: Double
    @NSManaged public var fuelcostnow: Double
    @NSManaged public var fuelcosttot: Double
    @NSManaged public var fueldate: Date?
    @NSManaged public var fueltype: String?
    @NSManaged public var id: UUID?
    @NSManaged public var insurancecostnow: Int64
    @NSManaged public var insurancecosttot: Int64
    @NSManaged public var insurancedate: Date?
    @NSManaged public var insurercontact: String?
    @NSManaged public var insurername: String?
    @NSManaged public var insurerpolicy: String?
    @NSManaged public var litresnow: Double
    @NSManaged public var litrestot: Double
    @NSManaged public var maintenancecost: Int64
    @NSManaged public var make: String?
    @NSManaged public var mileagenow: Int64
    @NSManaged public var mileagestarting: Int64
    @NSManaged public var model: String?
    @NSManaged public var motdate: Date?
    @NSManaged public var oiltype: String?
    @NSManaged public var purchasecost: Double
    @NSManaged public var purchasedate: Date?
    @NSManaged public var regdate: Date?
    @NSManaged public var regno: String?
    @NSManaged public var servicedue: String?
    @NSManaged public var taxdate: Date?
    @NSManaged public var tyrepressure: String?
    @NSManaged public var variant: String?
    @NSManaged public var version: String?
    @NSManaged public var vin: String?
    
    @NSManaged public var expenses: NSSet?
    
    public var unwrappedMake: String {
        make ?? "Unknown Make"
    } /// public var
    
    public var expensesArray: Array<Expense> {
        let expenseSet = expenses as? Set<Expense> ?? []
        return expenseSet.sorted { $0.expensedate ?? Date() > $1.expensedate ?? Date() }
    }
    
}  /// Extension Car

// MARK: Generated accessors for expenses
extension Car {

    @objc(addExpensesObject:)
    @NSManaged public func addToExpenses(_ value: Expense)

    @objc(removeExpensesObject:)
    @NSManaged public func removeFromExpenses(_ value: Expense)

    @objc(addExpenses:)
    @NSManaged public func addToExpenses(_ values: NSSet)

    @objc(removeExpenses:)
    @NSManaged public func removeFromExpenses(_ values: NSSet)

} /// Extension Car

extension Car : Identifiable {   /// Identifiable is used in LIST and ForeEach

}   /// Extension Car


//
//  Expense+CoreDataProperties.swift
//  CoreDataCar
//
//  Created by Chris Milne on 29/08/2023.
//
//

import Foundation
import CoreData


extension Expense {


    @nonobjc public class func fetchRequest() -> NSFetchRequest<Expense> {
        return NSFetchRequest<Expense>(entityName: "Expense")
    }

    @NSManaged public var exit: UUID?
    @NSManaged public var expensecost: Double
    @NSManaged public var expensedate: Date?
    @NSManaged public var expensedetail: String?
    @NSManaged public var regnum: String?
    
    @NSManaged public var cars: Car?

}

extension Expense : Identifiable {

}
